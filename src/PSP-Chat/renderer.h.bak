#include "common.h"
#include "intraFont/intraFont.h"
#include <stdio.h>
#include <stdarg.h>
#include <pspgum.h>

#define BUF_WIDTH (512)
#define SCR_WIDTH (480)
#define SCR_HEIGHT (272)
#define PIXEL_SIZE (4) /* change this if you change to another screenmode */
#define FRAME_SIZE (BUF_WIDTH * SCR_HEIGHT * PIXEL_SIZE)
#define ZBUF_SIZE (BUF_WIDTH SCR_HEIGHT * 2) /* zbuffer seems to be 16-bit? */

#define PAD1 0,
#define PAD2 PAD1 PAD1
#define PAD4 PAD2 PAD2
#define PAD8 PAD4 PAD4
#define PAD12 PAD8 PAD4
#define PAD14 PAD8 PAD4 PAD2
#define PAD15 PAD8 PAD4 PAD2 PAD1
#define PAD16 PAD8 PAD8
#define PAD24 PAD16 PAD8

#include <pspgu.h>
#include <pspgum.h>
#include <pspctrl.h>
#include <pspkernel.h>
#include <pspdisplay.h>
#include <pspdebug.h>
#include <psppower.h>
#include <psptypes.h>
#include <stdarg.h>
#include <stdio.h>
#include <pspge.h>
#include <pspgu.h>

extern const char Roboto_pgf_start[];
extern unsigned int Roboto_pgf_size;

static unsigned int staticOffset = 0;

static unsigned int getMemorySize(unsigned int width, unsigned int height, unsigned int psm)
{
	switch (psm)
	{
	case GU_PSM_T4:
		return (width * height) >> 1;

	case GU_PSM_T8:
		return width * height;

	case GU_PSM_5650:
	case GU_PSM_5551:
	case GU_PSM_4444:
	case GU_PSM_T16:
		return 2 * width * height;

	case GU_PSM_8888:
	case GU_PSM_T32:
		return 4 * width * height;

	default:
		return 0;
	}
}

void* getStaticVramBuffer(unsigned int width, unsigned int height, unsigned int psm)
{
	unsigned int memSize = getMemorySize(width, height, psm);
	void* result = (void*)staticOffset;
	staticOffset += memSize;

	return result;
}

void* getStaticVramTexture(unsigned int width, unsigned int height, unsigned int psm)
{
	void* result = getStaticVramBuffer(width, height, psm);
	return (void*)(((unsigned int)result) + ((unsigned int)sceGeEdramGetAddr()));
}

namespace renderer {
	intraFont* font;

	static unsigned int __attribute__((aligned(16))) list[262144];

	// initalize the sceGu and the fonts
	inline void init() {
/*
		// sceGu init
		sceGuInit();

		sceGuStart(GU_DIRECT, list);
		sceGuDrawBuffer(GU_PSM_8888, (void*)0, BUF_WIDTH);
		sceGuDispBuffer(SCR_WIDTH, SCR_HEIGHT, (void*)FRAME_SIZE, BUF_WIDTH);
		sceGuDepthBuffer((void*)(FRAME_SIZE * 2), BUF_WIDTH);
		sceGuOffset(2048 - (SCR_WIDTH / 2), 2048 - (SCR_HEIGHT / 2));
		sceGuViewport(2048, 2048, SCR_WIDTH, SCR_HEIGHT);
		sceGuDepthRange(0xc350, 0x2710);
		sceGuScissor(0, 0, SCR_WIDTH, SCR_HEIGHT);
		sceGuEnable(GU_SCISSOR_TEST);
		sceGuFrontFace(GU_CW);
		sceGuEnable(GU_TEXTURE_2D);
		sceGuClear(GU_COLOR_BUFFER_BIT | GU_DEPTH_BUFFER_BIT);

		sceGuEnable(GU_BLEND);
		sceGuBlendFunc(GU_ADD, GU_SRC_ALPHA, GU_ONE_MINUS_SRC_ALPHA, 0, 0);

		sceGuStencilFunc(GU_ALWAYS, 1, 1);
		sceGuStencilOp(GU_KEEP, GU_KEEP, GU_REPLACE);

		sceGuTexFilter(GU_LINEAR, GU_LINEAR);

		sceGuFinish();
		sceGuSync(0, 0);

		sceDisplayWaitVblankStart();
		sceGuDisplay(GU_TRUE);

		sceGumMatrixMode(GU_PROJECTION);
		sceGumLoadIdentity();
		sceGumOrtho(0, 480, 272, 0, -30, 30);

		sceGumMatrixMode(GU_VIEW);
		sceGumLoadIdentity();

		sceGumMatrixMode(GU_MODEL);
		sceGumLoadIdentity();*/

		void* fbp0 = getStaticVramBuffer(BUF_WIDTH, SCR_HEIGHT, GU_PSM_8888);
		void* fbp1 = getStaticVramBuffer(BUF_WIDTH, SCR_HEIGHT, GU_PSM_8888);
		void* zbp = getStaticVramBuffer(BUF_WIDTH, SCR_HEIGHT, GU_PSM_4444);

		sceGuInit();

		sceGuStart(GU_DIRECT, list);
		sceGuDrawBuffer(GU_PSM_8888, fbp0, BUF_WIDTH);
		sceGuDispBuffer(SCR_WIDTH, SCR_HEIGHT, fbp1, BUF_WIDTH);
		sceGuDepthBuffer(zbp, BUF_WIDTH);
		sceGuOffset(2048 - (SCR_WIDTH / 2), 2048 - (SCR_HEIGHT / 2));
		sceGuViewport(2048, 2048, SCR_WIDTH, SCR_HEIGHT);
		sceGuDepthRange(65535, 0);
		sceGuScissor(0, 0, SCR_WIDTH, SCR_HEIGHT);
		sceGuEnable(GU_SCISSOR_TEST);
		sceGuDepthFunc(GU_GEQUAL);
		sceGuEnable(GU_DEPTH_TEST);
		sceGuFrontFace(GU_CCW);
		sceGuShadeModel(GU_SMOOTH);
		sceGuEnable(GU_CULL_FACE);
		sceGuEnable(GU_TEXTURE_2D);
		sceGuEnable(GU_CLIP_PLANES);
		sceGuEnable(GU_LINE_SMOOTH);

		sceGuEnable(GU_BLEND);
		sceGuBlendFunc(GU_ADD, GU_SRC_ALPHA, GU_ONE_MINUS_SRC_ALPHA, 0, 0);

		sceGuStencilFunc(GU_ALWAYS, 1, 1);
		sceGuStencilOp(GU_KEEP, GU_KEEP, GU_REPLACE);

		sceGuTexFilter(GU_NEAREST, GU_NEAREST);

		sceGuFinish();
		sceGuSync(0, 0);

		sceDisplayWaitVblankStart();
		sceGuDisplay(GU_TRUE);
		
		sceCtrlSetSamplingCycle(0);
		sceCtrlSetSamplingMode(PSP_CTRL_MODE_ANALOG);

		//Sets up orthogonal drawing

		sceGumMatrixMode(GU_PROJECTION);
		sceGumLoadIdentity();
		sceGumOrtho(0, 480, 272, 0, -30, 30);

		sceGumMatrixMode(GU_VIEW);
		sceGumLoadIdentity();

		sceGumMatrixMode(GU_MODEL);
		sceGumLoadIdentity();

		// font init
		intraFontInit();

		font = intraFontLoad("font.pgf", INTRAFONT_CACHE_ALL);
		//intraFontSetStyle(font, 0.7f, 0x00000000, 0xFFFFFFFF, INTRAFONT_ALIGN_LEFT);
	};

	inline void begin() {
		// start the sceGu
		sceGuStart(GU_DIRECT, list);

		// clear the screen
		sceGuClearColor(0xFFFFFFFF);
		sceGuClearStencil(0);
		sceGuClearDepth(0);
		sceGuClear(GU_COLOR_BUFFER_BIT | GU_STENCIL_BUFFER_BIT | GU_DEPTH_BUFFER_BIT);
	};

	inline void end() {
		// finish sceGu 
		sceGuFinish();
		sceGuSync(0, 0);

		sceDisplayWaitVblankStart();
		sceGuSwapBuffers();
	};

	inline void clear() {
		// clear the screen
		sceGuClearColor(0x80808080);
		sceGuClearStencil(0);
		sceGuClearDepth(0);
		sceGuClear(GU_COLOR_BUFFER_BIT | GU_STENCIL_BUFFER_BIT | GU_DEPTH_BUFFER_BIT);
	};
	
	inline void print(int x, int y, const char* message, ...) {
		//va_list argList;
		//char cbuffer[512];
		//va_start(argList, message);
		//vsnprintf(cbuffer, 512, message, argList);
		//va_end(argList);

		sceGuEnable(GU_BLEND);
		sceGuEnable(GU_TEXTURE_2D);
		intraFontPrint(font, x, y, message);
		sceGuDisable(GU_BLEND);
		sceGuDisable(GU_TEXTURE_2D);
	};
}